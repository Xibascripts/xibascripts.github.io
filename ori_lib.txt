--
-- Ori Lib
--   Loadstring version
--

---- Import 30log library (for object oriented Lua)
local next, assert, pairs, type, tostring, setmetatable, baseMt, _instances, _classes, _class = next, assert, pairs, type, tostring, setmetatable, {}, setmetatable({},{__mode = 'k'}), setmetatable({},{__mode = 'k'})
local function assert_call_from_class(class, method) assert(_classes[class], ('Wrong method call. Expected class:%s.'):format(method)) end; local function assert_call_from_instance(instance, method) assert(_instances[instance], ('Wrong method call. Expected instance:%s.'):format(method)) end
local function bind(f, v) return function(...) return f(v, ...) end end
local default_filter = function() return true end
local function deep_copy(t, dest, aType) t = t or {}; local r = dest or {}; for k,v in pairs(t) do if aType ~= nil and type(v) == aType then r[k] = (type(v) == 'table') and ((_classes[v] or _instances[v]) and v or deep_copy(v)) or v elseif aType == nil then r[k] = (type(v) == 'table') and k~= '__index' and ((_classes[v] or _instances[v]) and v or deep_copy(v)) or v end; end return r end
local function instantiate(call_init,self,...) assert_call_from_class(self, 'new(...) or class(...)'); local instance = {class = self}; _instances[instance] = tostring(instance); deep_copy(self, instance, 'table')instance.__index, instance.__subclasses, instance.__instances, instance.mixins = nil, nil, nil, nil; setmetatable(instance,self); if call_init and self.init then if type(self.init) == 'table' then deep_copy(self.init, instance) else self.init(instance, ...) end end; return instance end
local function extend(self, name, extra_params)assert_call_from_class(self, 'extend(...)'); local heir = {}; _classes[heir] = tostring(heir); self.__subclasses[heir] = true; deep_copy(extra_params, deep_copy(self, heir))heir.name, heir.__index, heir.super, heir.mixins = extra_params and extra_params.name or name, heir, self, {}; return setmetatable(heir,self)end
baseMt = { __call = function (self,...) return self:new(...) end, __tostring = function(self,...)if _instances[self] then return ("instance of '%s' (%s)"):format(rawget(self.class,'name') or '?', _instances[self]) end; return _classes[self] and ("class '%s' (%s)"):format(rawget(self,'name') or '?', _classes[self]) or self end
}; _classes[baseMt] = tostring(baseMt); setmetatable(baseMt, {__tostring = baseMt.__tostring})
class = {isClass = function(t) return not not _classes[t] end, isInstance = function(t) return not not _instances[t] end}
_class = function(name, attr) local c = deep_copy(attr); _classes[c] = tostring(c)
	c.name, c.__tostring, c.__call, c.new, c.create, c.extend, c.__index, c.mixins, c.__instances, c.__subclasses = name or c.name, baseMt.__tostring, baseMt.__call, bind(instantiate, true), bind(instantiate, false), extend, c, setmetatable({},{__mode = 'k'}), setmetatable({},{__mode = 'k'}), setmetatable({},{__mode = 'k'})
	c.subclasses = function(self, filter, ...) assert_call_from_class(self, 'subclasses(class)'); filter = filter or default_filter; local subclasses = {}; for class in pairs(_classes) do if class ~= baseMt and class:subclassOf(self) and filter(class,...) then subclasses[#subclasses + 1] = class end end; return subclasses end
	c.instances = function(self, filter, ...) assert_call_from_class(self, 'instances(class)'); filter = filter or default_filter; local instances = {}; for instance in pairs(_instances) do if instance:instanceOf(self) and filter(instance, ...) then instances[#instances + 1] = instance end end; return instances end
	c.subclassOf = function(self, superclass) assert_call_from_class(self, 'subclassOf(superclass)'); assert(class.isClass(superclass), 'Wrong argument given to method "subclassOf()". Expected a class.'); local super = self.super; while super do if super == superclass then return true end; super = super.super end; return false end
	c.classOf = function(self, subclass) assert_call_from_class(self, 'classOf(subclass)'); assert(class.isClass(subclass), 'Wrong argument given to method "classOf()". Expected a class.'); return subclass:subclassOf(self) end
	c.instanceOf = function(self, fromclass) assert_call_from_instance(self, 'instanceOf(class)'); assert(class.isClass(fromclass), 'Wrong argument given to method "instanceOf()". Expected a class.'); return ((self.class == fromclass) or (self.class:subclassOf(fromclass))) end
	c.cast = function(self, toclass) assert_call_from_instance(self, 'instanceOf(class)'); assert(class.isClass(toclass), 'Wrong argument given to method "cast()". Expected a class.'); setmetatable(self, toclass); self.class = toclass; return self end
	c.with = function(self,...) assert_call_from_class(self, 'with(mixin)'); for _, mixin in ipairs({...}) do assert(self.mixins[mixin] ~= true, ('Attempted to include a mixin which was already included in %s'):format(tostring(self))); self.mixins[mixin] = true; deep_copy(mixin, self, 'function') end return self end
	c.includes = function(self, mixin) assert_call_from_class(self,'includes(mixin)'); return not not (self.mixins[mixin] or (self.super and self.super:includes(mixin))) end	
	c.without = function(self, ...) assert_call_from_class(self, 'without(mixin)'); for _, mixin in ipairs({...}) do
			assert(self.mixins[mixin] == true, ('Attempted to remove a mixin which is not included in %s'):format(tostring(self))); local classes = self:subclasses(); classes[#classes + 1] = self
			for _, class in ipairs(classes) do for method_name, method in pairs(mixin) do if type(method) == 'function' then class[method_name] = nil end end end; self.mixins[mixin] = nil end; return self end; return setmetatable(c, baseMt) end
class._DESCRIPTION = '30 lines library for object orientation in Lua'; class._VERSION = '30log v1.2.0'; class._URL = 'http://github.com/Yonaba/30log'; class._LICENSE = 'MIT LICENSE <http://www.opensource.org/licenses/mit-license.php>' setmetatable(class,{__call = function(_,...) return _class(...) end })
----

---- 'new' function, (its not really skidded i just made it a long time ago)
new = function(InstanceClass, InstanceParent, ...)
	-- Check if the arguments are correct
	local InstanceClassType = type(InstanceClass)
	local InstanceParentType = typeof(InstanceParent)
	assert(InstanceClassType == "nil" or InstanceClassType == "string", "Expected string at argument #1, got " .. InstanceClassType)
	assert(InstanceParentType == "nil" or InstanceParentType == "Instance", "Expected Instance at argument #2, got " .. InstanceParentType)

	-- Create instance
	local ReturnedInstance
	local SUCCESS, RETURN = pcall(function()
		ReturnedInstance = Instance.new(InstanceClass)
	end)
	if not SUCCESS then
		error(InstanceClass .. " is not a valid ClassName: " .. debug.traceback())
		return nil
	end
	ReturnedInstance.Parent = InstanceParent

	-- Change properties of the Instance
	local ArgumentProperties = {...}
	local SetProperties = {}

	for ArgumentIndex, Argument in ipairs(ArgumentProperties) do
		-- Check if 'Argument' is a table
		local ArgumentType = type(Argument)
		assert(ArgumentType == "table", "Expected table at argument #" .. tostring(ArgumentIndex + 2) .. ", got " .. ArgumentType)
		--
		for PropertyName, Property in pairs(Argument) do
			SetProperties[PropertyName] = Property
		end
	end

	for PropertyName, Property in pairs(SetProperties) do
		local SUCCESS, RETURN = pcall(function()
			ReturnedInstance[PropertyName] = Property
		end)

		if not SUCCESS then
			error("Error trying to set property '" .. PropertyName .. "' to Instance " .. InstanceClass .. " (Property type is " .. type(PropertyValue) .. ") ")
		end
	end

	return ReturnedInstance
end
----

-- Create Screengui
_G.ORI_LIB_INSTANCES = (_G.ORI_LIB_INSTANCES or 0) + 1

GUI = Instance.new("ScreenGui")
GUI.ResetOnSpawn = false
GUI.Name = ("_ORI_LIB_%d"):format(_G.ORI_LIB_INSTANCES)

do
	local _LP = game:GetService("Players").LocalPlayer

	local SUCCESS, RETURN = pcall(function()
		if syn then syn.protect_gui(GUI) end

		GUI.Parent = (get_hidden_gui and get_hidden_gui()) or game:GetService("CoreGui")
	end)

	if not SUCCESS then
		GUI.Parent = _LP:FindFirstChildOfClass("PlayerGui")
	end
end
----

---- Notifications system
NotificationHeight = 40

NotificationNormal = Color3.fromRGB(47, 47, 47)
NotificationError = Color3.fromRGB(200, 47, 47)
NotificationTitleHeight = 15
NotificationGreen = Color3.fromRGB(48, 220, 48)
NotificationRed = Color3.fromRGB(220, 48, 48)
NotificationBlue = Color3.fromRGB(48, 108, 220)
NotificationYellow = Color3.fromRGB(231, 228, 44)
NotificationCoral = Color3.fromRGB(247, 195, 119)
NotificationOrange = Color3.fromRGB(220, 111, 48)
NotificationGold = Color3.fromRGB(184, 151, 46)
NotificationWhite = Color3.fromRGB(255, 255, 255)
NotificationBlack = Color3.fromRGB(0, 0, 0)

Notification = class("Notification", {
	parent = nil, -- : UIInstance

	frame = nil,
	bg = nil,
	framecorner = nil,
	colorbar = nil,
	text = nil,
	duration = 0,

	fadeInTweens = {},
	fadeOutTweens = {},
	visible = false,
})

function Notification:createTweens()
	local ts = game:GetService("TweenService")

	local animInfo = TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.In)

	table.insert(self.fadeOutTweens, ts:Create(self.frame, animInfo, {BackgroundTransparency = 1, Position = UDim2.fromOffset(0, 20)}))
	table.insert(self.fadeOutTweens, ts:Create(self.text, animInfo, {TextTransparency = 1}))
	table.insert(self.fadeOutTweens, ts:Create(self.colorbar, animInfo, {BackgroundTransparency = 1}))
	
	table.insert(self.fadeInTweens, ts:Create(self.frame, animInfo, {BackgroundTransparency = 0, Position = UDim2.fromOffset(0, 0)}))
	table.insert(self.fadeInTweens, ts:Create(self.text, animInfo, {TextTransparency = 0}))
	table.insert(self.fadeInTweens, ts:Create(self.colorbar, animInfo, {BackgroundTransparency = 0}))
end

function Notification:reset()
	self.frame.BackgroundTransparency = 1
	self.frame.Position = UDim2.fromOffset(0, 20)
	
	self.text.TextTransparency = 1
	
	self.colorbar.BackgroundTransparency = 12
	
	self.visible = false
end

function Notification:fadeOut()
	self.visible = false
	for i, v in ipairs(self.fadeOutTweens) do
		v:Play()
	end
end

function Notification:fadeIn()
	self.visible = true
	for i, v in ipairs(self.fadeInTweens) do
		v:Play()
	end
end

function Notification:setRadius(num)
	self.framecorner.CornerRadius = UDim.new(0, num)
end

function Notification:setColor(color)
	self.colorbar.BackgroundColor3 = color
end

function Notification:setHeight(num)
	self.bg.Size = UDim2.new(1, 0, 0, num or NotificationHeight)
end

function Notification:init(parent, color, text, height)
	self.parent = parent

	-- Create bg
	self.bg = new("Frame", self.parent, {
		BackgroundTransparency = 1,
		ClipsDescendants = true
	})
	self:setHeight(height)

	-- Create frame
	self.frame = new("Frame", self.bg, {
		Size = UDim2.new(1, 0, 1, 0),
		BorderSizePixel = 0,
		BackgroundColor3 = Color3.fromRGB(47, 47, 47)
	})
	-- Add corner
	self.framecorner = new("UICorner", self.frame, {
		CornerRadius = UDim.new()
	})

	-- Create colorbar
	self.colorbar = new("Frame", self.frame, {
		Position = UDim2.fromScale(0, 1), AnchorPoint = Vector2.new(0, 1),
		Size = UDim2.new(1, 0, 0, 4),
		BorderSizePixel = 0,
	})
	self:setColor(color)

	-- Create text
	self.text = new("TextLabel", self.frame, {
		Size = UDim2.new(1, 0, 1, 0),
		BackgroundTransparency = 1,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		Text = text,
	})
	
	-- Create tweens
	self:reset()
	self:createTweens()
	self:fadeIn()
end
-- Notification Holder
NotificationHolder = class("NotificationHolder", {
	parent = nil,

	notifications = {},
	aliveNotifications = 0,

	frame = nil,
	framelayout = nil,
})

function NotificationHolder:init(parent)
	self.parent = parent

	-- Create frame
	self.frame = new("Frame", self.parent, {
		BackgroundTransparency = 1,
		Position = UDim2.new(0, 5, 1, -60),
		AnchorPoint = Vector2.new(0, 1),
		Size = UDim2.fromOffset(230, 300),
	})
	-- Add layout
	self.framelayout = new("UIListLayout", self.frame, {
		SortOrder = Enum.SortOrder.LayoutOrder,
		VerticalAlignment = Enum.VerticalAlignment.Bottom,
		Padding = UDim.new(0, 3)
	})
end

function NotificationHolder:notificate(data)
	local notifId = self.aliveNotifications + 1
	self.aliveNotifications = notifId
	
	local notif = Notification(self.frame, data.color, data.text, data.height)
	table.insert(self.notifications, notif)
	
	if notifId == 1 then
		notif:setRadius(4)
	end
	
	notif:fadeIn()
	
	coroutine.wrap(function(self, duration, notif, id)
		
		wait(duration)
		
		notif:fadeOut()
		self.aliveNotifications = self.aliveNotifications - 1
		
		local nextNotif = self.notifications[id + 1]
		
		wait(0.2)
		
		if nextNotif then
			nextNotif:setRadius(4)
		end
		
		if self.aliveNotifications == 0 then
			for i, v in ipairs(self.notifications) do
				v.bg:Destroy()
				self.notifications[i] = nil
			end
		end
		
	end)(self, data.duration, notif, notifId)
end

--[[
Sample - Without Notificate
local holder = NotificationHolder(GUI)
local notif1 = Notification(holder.frame, NotificationRed, "._.XD")
notif1:setRadius(4)

wait(1)
notif1:fadeOut()
]]

	-- Create the main NotificationHolder
MainNotificationHolder = NotificationHolder(GUI)

		-- Create the main notificate function
notificate = function(data)
	assert(type(data.text) == "string", ("('notificate') malformed text, string expected got %s"):format(type(data.text)))
	assert(typeof(data.color) == "Color3", ("('notificate') malformed color, Color3 expected got %s"):format(typeof(data.color)))
	assert(type(data.duration) == "number", ("('notificate') malformed duration, number expected got %s"):format(type(data.duration)))
	local heightType = type(data.height or NotificationHeight); assert(heightType == 'number', ("('notificate') malformed height, number expected got %s"):format(heightType))

	MainNotificationHolder:notificate(data)
end

--[[
Notificating Sample
notificate({
	["text"] = "Hello world!",
	["color"] = NotificationGreen,
	["duration"] = 11,
})

notificate({
	["text"] = "Error: These notifications are very hot",
	["color"] = NotificationError,
	["duration"] = 6,
	["height"] = 90,
})
]]

----

---- Skidded Tween Drag function :sunglasses:
local UIS = game:GetService("UserInputService")
function dragify(Frame)
	dragToggle = nil
	local dragSpeed = 0.25
	dragInput = nil
	dragStart = nil
	local dragPos = nil
	function updateInput(input)
		local Delta = input.Position - dragStart
		local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)
		game:GetService("TweenService"):Create(Frame, TweenInfo.new(0.25), {Position = Position}):Play()
	end
	Frame.InputBegan:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and UIS:GetFocusedTextBox() == nil then
			dragToggle = true
			dragStart = input.Position
			startPos = Frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragToggle = false
				end
			end)
		end
	end)
	Frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)
	game:GetService("UserInputService").InputChanged:Connect(function(input)
		if input == dragInput and dragToggle then
			updateInput(input)
		end
	end)
end
----

---- UIElement class (Used by buttons, toggles, numbervalues, etc...)
UIElement = class("UIElement", {
	height = 0,
	parent = nil,
})

function UIElement:setParent(parent)
	self.parent = parent
end

---- TabButton (Used by Tab)
TabButton = class("TabButton", {
	parent = nil, -- : UIInstance

	button       = nil, -- : TextButton (parented to 'parent')
	buttonCorner = nil, -- : UICorner (parented to Button)

	width = 0, -- <Width of the button> : Number

	selectTween   = nil, -- <Tween for selecting the button> : Tween
	deselectTween = nil, -- <Tween for deselecting the button> : Tween

	selected = false, -- <Determines if button is selected> : boolean
	clicked = nil, -- : button.Activated
})

function TabButton:setText(text)
	self.button.Text = text
end

function TabButton:createTweens()
	-- Creates 'selectTween' and 'deselectTween'
	local ts = game:GetService("TweenService")

	local animInfo = TweenInfo.new(0.2, Enum.EasingStyle.Sine)

	self.selectTween = ts:Create(self.button, animInfo, {
		BackgroundColor3 = Color3.fromRGB(68, 186, 82)
	})

	self.diselectTween = ts:Create(self.button, animInfo, {
		BackgroundColor3 = Color3.fromRGB(60, 60, 60)
	})
end

function TabButton:select()
	self.selected = true
	self.selectTween:Play()
end

function TabButton:diselect()
	self.selected = false
	self.diselectTween:Play()
end

function TabButton:init(parent, name)
	self.parent = parent

	-- Create button
	self.button = new("TextButton", self.parent, {
		Size = UDim2.new(0, 70, 1, 0),
		BackgroundColor3 = Color3.fromRGB(60, 60, 60),
		BorderSizePixel = 0,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		Font = Enum.Font.Code,
		TextSize = 14,
	})
	self:setText(name)
	self.width = 70
	-- Add corner
	self.buttonCorner = new("UICorner", self.button, {
		CornerRadius = UDim.new(0, 2)
	})

	-- Create tweens
	self:createTweens()

	-- Create 'clicked'
	self.clicked = self.button.Activated
end

---- TabFrame (used by Tab)
TabFrame = class("TabFrame", {
	parent        = nil, -- : UIInstance
	frame         = nil, -- : Frame (parented to 'parent')
	frameLayout   = nil, -- : UIListLayout (parented to frame)
	framePadding  = nil, -- : UIPadding (parented to frame(
})

function TabFrame:show()
	self.visible = true
	self.frame.Visible = true
end

function TabFrame:hide()
	self.visible = false
	self.frame.Visible = false
end

function TabFrame:init(parent)
	self.parent = parent

	-- Create frame
	self.frame = new("ScrollingFrame", self.parent, {
		Size = UDim2.fromScale(1, 1),
		BackgroundTransparency = 1,
		BorderSizePixel = 0,
		CanvasSize = UDim2.new(1, 0, 0, 15),
		ScrollingDirection = Enum.ScrollingDirection.Y,
		ScrollBarThickness = 5,
		Visible = false,
	})
	-- Add padding
	self.framePadding = new("UIPadding", self.frame, {
		PaddingTop = UDim.new(0, 10),
		PaddingLeft = UDim.new(0, 10),
		PaddingRight = UDim.new(0, 10),
	})
	-- Add layout
	self.frameLayout = new("UIListLayout", self.frame, {
		FillDirection = Enum.FillDirection.Vertical,
		Padding = UDim.new(0, 5),
		SortOrder = Enum.SortOrder.LayoutOrder,	
	})
end

---- Tab (used by Window)
Tab = class("Tab", {
	frame = nil,
	button = nil,

	buttonParent = nil,
	frameParent = nil,

	name = "",
	elements = {}
})

function Tab:add(element)
	-- Check for arguments correct
	assert(element.setParent, "Tab:add() the element doesnt have a :setParent method")
	assert(element.setParent, "Tab:add() the element doesnt have a height attribute")

	element:setParent(self.frame.frame)

	table.insert(self.elements, element)

	-- Make so when you add lot of elements it becomes scrollable
	self.frame.frame.CanvasSize = self.frame.frame.CanvasSize + UDim2.fromOffset(0, element.height + 5)

	return element
end

function Tab:init(name, buttonParent, frameParent)
	self.name = name

	self.buttonParent = buttonParent
	self.frameParent = frameParent

	self.frame = TabFrame(self.frameParent)

	self.button = TabButton(self.buttonParent, name)
end

---- Window
Window = class("Window", {
	BG       = nil,
	BGCorner = nil,

	Title        = nil,
	TitlePadding = nil,

	TabsBG      = nil,
	TabsCorner  = nil,
	TabsPadding = nil,
	TabsLayout  = nil,
	TabSelected = nil,
	Tabs        = {},

	Window       = nil,
	WindowCorner = nil,

	ToggleKey = nil,
	OpenTween = nil,
	HideTween = nil,
	visible   = false,
})

function Window:setTitle(title)
	self.Title.Text = title
end

function Window:createTweens()
	local ts = game:GetService("TweenService")

	local animInfo = TweenInfo.new(0.2, Enum.EasingStyle.Sine)

	self.OpenTween = ts:Create(self.BG, animInfo, {
		Size = UDim2.fromOffset(375, 347)
	})

	self.OpenTween.Completed:Connect(function()
		self.BG.Visible = true
	end)

	self.HideTween = ts:Create(self.BG, animInfo, {
		Size = UDim2.fromOffset(375, 0)
	})

	self.HideTween.Completed:Connect(function()
		self.BG.Visible = false
	end)
end

function Window:show()
	self.visible = true
	self.BG.Visible = true

	self.OpenTween:Play()
end

function Window:hide()
	self.visible = false
	self.BG.Visible = true

	self.HideTween:Play()
end

function Window:makeToggleable(key)
	self.ToggleKey = key

	local uis = game:GetService("UserInputService")
	uis.InputEnded:Connect(function(inputObject)
		if (inputObject.KeyCode == self.ToggleKey) and (not uis:GetFocusedTextBox()) then

			if self.visible then
				self:hide()
			else
				self:show()
			end

		end
	end)
end

function Window:selectTab(tabname)
	local tab = self.TabSelected
	if tab then
		tab.frame:hide()
		tab.button:diselect()
	end

	tab = self.Tabs[tabname]

	tab.frame:show()
	tab.button:select()

	self.TabSelected = tab
end

function Window:addTab(tabname)
	local tab = Tab(tabname, self.TabsBG, self.Window)

	self.Tabs[tabname] = tab

	tab.button.clicked:Connect(function()
		self:selectTab(tabname)
	end)

	-- Make so when you add lot of tabs it becomes scrollable
	self.TabsBG.CanvasSize = self.TabsBG.CanvasSize + UDim2.fromOffset(tab.button.width + 5, 0)

	return tab
end

function Window:init(title, key)
	-- Create BG
	self.BG = new("Frame", GUI, {
		Size = UDim2.fromOffset(375, 0),
		Position = UDim2.fromScale(0.5, 0.5),
		AnchorPoint = Vector2.new(0.5, 0.5),
		BackgroundColor3 = Color3.fromRGB(50, 50, 50),
		ClipsDescendants = true,
	})
	-- Add corner
	self.BGCorner = new("UICorner", self.BG, {
		CornerRadius = UDim.new(0, 4)
	})

	-- Title
	self.Title = new("TextLabel", self.BG, {
		BackgroundColor3 = Color3.fromRGB(255, 255, 255),
		BackgroundTransparency = 1,
		Size = UDim2.new(0, 370, 0, 25),
		Font = Enum.Font.Code,
		TextColor3 = Color3.fromRGB(190, 190, 190),
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left,
	})
	self:setTitle(title)
	-- Add padding
	self.TitlePadding = new("UIPadding", self.Title, {
		PaddingLeft = UDim.new(0, 5),
	})

	-- Tabs
	self.TabsBG = new("ScrollingFrame",  self.BG, {
		BackgroundColor3 = Color3.fromRGB(85, 85, 85),
		Position = UDim2.fromOffset(6, 24),
		CanvasSize = UDim2.new(0, 5, 0, 0),
		ScrollingDirection = Enum.ScrollingDirection.X,
		ScrollBarThickness = 2,
		VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Right,
		Size = UDim2.new(0, 363, 0, 25), -- BRUH WHAT IS THIS, IM GOING TO FIX THIS GARBAGE LATER
	})
	-- Add corner
	self.TabsCorner = new("UICorner", self.TabsBG, {
		CornerRadius = UDim.new(0, 2),
	})
	-- Add padding
	self.TabsPadding = new("UIPadding", self.TabsBG, {
		PaddingLeft = UDim.new(0, 5),
		PaddingTop = UDim.new(0, 2),
		PaddingBottom = UDim.new(0, 3),
		PaddingRight = UDim.new(0, 3),
	})
	-- Add UIListLayout
	self.TabsLayout = new("UIListLayout", self.TabsBG, {
		FillDirection = Enum.FillDirection.Horizontal,
		Padding = UDim.new(0, 5),
		SortOrder = Enum.SortOrder.LayoutOrder,
	})

	-- Window
	self.Window = new("Frame", self.BG, {
		BackgroundColor3 = Color3.fromRGB(85, 85, 85),
		Position = UDim2.fromOffset(6, 56),
		Size = UDim2.new(0, 363, 0, 286), -- HARDCODED VALUES BRUHHH
	})
	-- Add Corner
	self.WindowCorner = new("UICorner", self.Window, {
		CornerRadius = UDim.new(0, 2),
	})

	-- Make draggable
	dragify(self.BG)

	-- Create tweens
	self:createTweens()

	-- Show window
	self:show()

	-- Make toggleable
	self:makeToggleable(key)
end

-- Assets
-- Button
Button = UIElement:extend("Button", {
	button = nil,
	corner = nil,

	clicked = nil,
})

function Button:setParent(parent)
	self.parent = parent

	self.button.Parent = self.parent
end

function Button:init(text)
	-- Create button
	self.button = new("TextButton", nil, {
		BackgroundColor3 = Color3.fromRGB(61, 61, 61),
		TextColor3 = Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0,
		Size = UDim2.new(1, 0, 0, 32),
		Text = text,
		TextSize = 10,
	})
	-- Add corner
	self.corner = new("UICorner", self.button, {
		CornerRadius = UDim.new(0, 4),
	})
	--
	self.clicked = self.button.Activated


	self.height = 32
end
-- Toggle

Toggle = UIElement:extend("Toggle", {
	value = nil,

	frame   = nil,
	button  = nil,
	label   = nil,
	framecorner  = nil,
	framepadding = nil,
	buttoncorner = nil,

	onAnim  = nil,
	offAnim = nil,

	-- changed
	changedBIN = nil,
	changed    = nil,
})

function Toggle:setParent(parent)
	self.parent = parent

	self.frame.Parent = self.parent
end

function Toggle:createTweens()
	local ts = game:GetService("TweenService")

	local animInfo = TweenInfo.new(0.2, Enum.EasingStyle.Sine)

	self.onAnim = ts:Create(self.button, animInfo, {
		BackgroundColor3 = Color3.fromRGB(40, 150, 40),
		Rotation = 180,
	})

	self.offAnim = ts:Create(self.button, animInfo, {
		BackgroundColor3 = Color3.fromRGB(150, 20, 20),
		Rotation = 0,
	})
end

function Toggle:set(value, instant, dontFire)
	if value == self.value then return end -- because i mean... ._.XD

	self.value = value
	if not dontFire then
		self.changedBIN:Fire()
	end

	if instant then
		if self.value then
			self.button.BackgroundColor3 = Color3.fromRGB(40, 150, 40)
			self.button.Rotation = 180
		else
			self.button.BackgroundColor3 = Color3.fromRGB(150, 20, 20)
			self.button.Rotation = 0
		end
	else
		if self.value then
			self.onAnim:Play()
		else
			self.offAnim:Play()
		end
	end
end

function Toggle:toggle(instant, dontFire)
	self:set(not self.value, instant, dontFire)
end

function Toggle:init(title, defaultVal)
	-- Create frame
	self.frame = new("Frame", nil, {
		BackgroundColor3 = Color3.fromRGB(61, 61, 61),
		BorderSizePixel  = 0,
		Size             = UDim2.new(1, 0, 0, 32)
	})
	-- Add corner
	self.framecorner = new("UICorner", self.frame, {
		CornerRadius = UDim.new(0, 4),
	})
	-- Add padding
	self.framepadding = new("UIPadding", self.frame, {
		PaddingLeft   = UDim.new(0, 11),
		PaddingRight  = UDim.new(0, 6),
		PaddingTop    = UDim.new(0, 5),
		PaddingBottom = UDim.new(0, 5),
	})

	-- Create label
	self.label = new("TextLabel", self.frame, {
		TextXAlignment = Enum.TextXAlignment.Left,
		TextSize = 10,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		Text = title,
		Size = UDim2.fromScale(1, 1),
		BackgroundTransparency = 1,
	})

	-- Create button
	self.button = new("TextButton", self.frame, {
		Size = UDim2.fromScale(1, 1), SizeConstraint = Enum.SizeConstraint.RelativeYY,
		Position = UDim2.fromScale(1), AnchorPoint = Vector2.new(1),
		Text = "",
	})
	-- Add corner
	self.buttoncorner = new("UICorner", self.button, {
		CornerRadius = UDim.new(0, 4),
	})

	-- Create tweens
	self:createTweens()

	-- Create event
	self.changedBIN = new("BindableEvent")
	self.changed = self.changedBIN.Event

	-- End
	self:set(defaultVal, true, true)

	self.button.Activated:Connect(function()
		self:toggle()
	end)

	self.height = 32
end

-- Number value
NumberValue = class("NumberValue", {
	value = nil,

	frame = nil,
	box = nil,
	label = nil,
	framecorner = nil,
	framepadding = nil,
	boxcorner = nil,

	-- changed
	changedBIN = nil,
	changed = nil,
})

function NumberValue:setParent(parent)
	self.parent = parent

	self.frame.Parent = self.parent
end

function NumberValue:init(title, defaultVal)
	-- Create frame
	self.frame = new("Frame", nil, {
		BackgroundColor3 = Color3.fromRGB(61, 61, 61),
		BorderSizePixel  = 0,
		Size             = UDim2.new(1, 0, 0, 32)
	})
	-- Add corner
	self.framecorner = new("UICorner", self.frame, {
		CornerRadius = UDim.new(0, 4),
	})
	-- Add padding
	self.framepadding = new("UIPadding", self.frame, {
		PaddingLeft   = UDim.new(0, 11),
		PaddingRight  = UDim.new(0, 6),
		PaddingTop    = UDim.new(0, 5),
		PaddingBottom = UDim.new(0, 5),
	})

	-- Create label
	self.label = new("TextLabel", self.frame, {
		TextXAlignment = Enum.TextXAlignment.Left,
		TextSize = 10,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		Text = title,
		Size = UDim2.fromScale(1, 1),
		BackgroundTransparency = 1,
	})

	-- Create TextBox
	self.box = new("TextBox", self.frame, {
		Size = UDim2.new(4, 0, 1, 0), SizeConstraint = Enum.SizeConstraint.RelativeYY,
		Position = UDim2.fromScale(1), AnchorPoint = Vector2.new(1),
		BackgroundColor3 = Color3.fromRGB(200, 200, 200),
		Text = "", TextColor3 = Color3.fromRGB(0, 0, 0),
		PlaceholderText = "Number", PlaceholderColor3 = Color3.fromRGB(100, 100, 100),
	})
	-- Add corner
	self.buttoncorner = new("UICorner", self.box, {
		CornerRadius = UDim.new(0, 4),
	})

	-- Make so you can only type numbers
	self.box:GetPropertyChangedSignal("Text"):Connect(function()
		local replacement = ""

		for match in self.box.Text:gmatch("[%d.]") do
			replacement = replacement .. match
		end

		self.box.Text = replacement
	end)

	-- Create events
	self.changedBIN = new("BindableEvent")
	self.changed = self.changedBIN.Event

	-- Make so value updates
	self.box.FocusLost:Connect(function(byEnter)
		if byEnter then
			self.value = self.box.Text

			self.changedBIN:Fire()
		end
	end)

	--
	self.height = 32
end

-- Bind value
BindValue = class("BindValue", {
	value = nil,

	frame = nil,
	button = nil,
	label = nil,
	framecorner = nil,
	framepadding = nil,
	buttoncorner = nil,

	prompt = false,
	promptConnection = false,

	-- pressed
	pressedConnection = nil,
	pressedBIN = nil,
	pressed = nil,
})

function BindValue:setParent(parent)
	self.parent = parent

	self.frame.Parent = self.parent
end

function BindValue:cancelPrompt()
	self.button.Text = self.value.Name
	if self.promptConnection then
		self.promptConnection:Disconnect()
		self.promptConnection = nil
	end

	self.prompt = false
end

function BindValue:set(value)
	self.value = value

	self.button.Text = self.value.Name
	self:cancelPrompt()
end

function BindValue:promptKey()
	if self.prompt then return end
	self.prompt = true

	self.button.Text = "[ Press Key ]"
end

function BindValue:init(title, defaultVal)
	-- Create frame
	self.frame = new("Frame", nil, {
		BackgroundColor3 = Color3.fromRGB(61, 61, 61),
		BorderSizePixel  = 0,
		Size             = UDim2.new(1, 0, 0, 32)
	})
	-- Add corner
	self.framecorner = new("UICorner", self.frame, {
		CornerRadius = UDim.new(0, 4),
	})
	-- Add padding
	self.framepadding = new("UIPadding", self.frame, {
		PaddingLeft   = UDim.new(0, 11),
		PaddingRight  = UDim.new(0, 6),
		PaddingTop    = UDim.new(0, 5),
		PaddingBottom = UDim.new(0, 5),
	})

	-- Create label
	self.label = new("TextLabel", self.frame, {
		TextXAlignment = Enum.TextXAlignment.Left,
		TextSize = 10,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		Text = title,
		Size = UDim2.fromScale(1, 1),
		BackgroundTransparency = 1,
	})

	-- Create TextBox
	self.button = new("TextButton", self.frame, {
		Size = UDim2.new(4, 0, 1, 0), SizeConstraint = Enum.SizeConstraint.RelativeYY,
		Position = UDim2.fromScale(1), AnchorPoint = Vector2.new(1),
		BackgroundColor3 = Color3.fromRGB(200, 200, 200),
		Text = "", TextColor3 = Color3.fromRGB(0, 0, 0),
	})
	-- Add corner
	self.buttoncorner = new("UICorner", self.button, {
		CornerRadius = UDim.new(0, 4),
	})

	-- Make promptable
	self.button.Activated:Connect(function()
		if self.prompt then
			self:cancelPrompt()
		else
			self:promptKey()
		end
	end)

	-- Default value
	self:set(defaultVal)

	-- pressed
	self.pressedBIN = new("BindableEvent")
	self.pressed = self.pressedBIN.Event

	local uis = game:GetService("UserInputService")
	self.pressedConnection = uis.InputEnded:Connect(function(input, gameImportant)
		if input.KeyCode == self.value and not uis:GetFocusedTextBox() and not self.prompt then
			self.pressedBIN:Fire()
		elseif self.prompt and not uis:GetFocusedTextBox() and not gameImportant then
			self:set(input.KeyCode)
		end
	end)

	--
	self.height = 32
end

-- End of Ori Lib
--See Docs/How to use at https://virtuallization.com/ori_lib_docs.html