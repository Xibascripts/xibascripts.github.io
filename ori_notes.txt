--
-- Ori Notes
--   Loadstring version
--

---- Import 30log library (for object oriented Lua)
local next, assert, pairs, type, tostring, setmetatable, baseMt, _instances, _classes, _class = next, assert, pairs, type, tostring, setmetatable, {}, setmetatable({},{__mode = 'k'}), setmetatable({},{__mode = 'k'})
local function assert_call_from_class(class, method) assert(_classes[class], ('Wrong method call. Expected class:%s.'):format(method)) end; local function assert_call_from_instance(instance, method) assert(_instances[instance], ('Wrong method call. Expected instance:%s.'):format(method)) end
local function bind(f, v) return function(...) return f(v, ...) end end
local default_filter = function() return true end
local function deep_copy(t, dest, aType) t = t or {}; local r = dest or {}; for k,v in pairs(t) do if aType ~= nil and type(v) == aType then r[k] = (type(v) == 'table') and ((_classes[v] or _instances[v]) and v or deep_copy(v)) or v elseif aType == nil then r[k] = (type(v) == 'table') and k~= '__index' and ((_classes[v] or _instances[v]) and v or deep_copy(v)) or v end; end return r end
local function instantiate(call_init,self,...) assert_call_from_class(self, 'new(...) or class(...)'); local instance = {class = self}; _instances[instance] = tostring(instance); deep_copy(self, instance, 'table')instance.__index, instance.__subclasses, instance.__instances, instance.mixins = nil, nil, nil, nil; setmetatable(instance,self); if call_init and self.init then if type(self.init) == 'table' then deep_copy(self.init, instance) else self.init(instance, ...) end end; return instance end
local function extend(self, name, extra_params)assert_call_from_class(self, 'extend(...)'); local heir = {}; _classes[heir] = tostring(heir); self.__subclasses[heir] = true; deep_copy(extra_params, deep_copy(self, heir))heir.name, heir.__index, heir.super, heir.mixins = extra_params and extra_params.name or name, heir, self, {}; return setmetatable(heir,self)end
baseMt = { __call = function (self,...) return self:new(...) end, __tostring = function(self,...)if _instances[self] then return ("instance of '%s' (%s)"):format(rawget(self.class,'name') or '?', _instances[self]) end; return _classes[self] and ("class '%s' (%s)"):format(rawget(self,'name') or '?', _classes[self]) or self end
}; _classes[baseMt] = tostring(baseMt); setmetatable(baseMt, {__tostring = baseMt.__tostring})
class = {isClass = function(t) return not not _classes[t] end, isInstance = function(t) return not not _instances[t] end}
_class = function(name, attr) local c = deep_copy(attr); _classes[c] = tostring(c)
	c.name, c.__tostring, c.__call, c.new, c.create, c.extend, c.__index, c.mixins, c.__instances, c.__subclasses = name or c.name, baseMt.__tostring, baseMt.__call, bind(instantiate, true), bind(instantiate, false), extend, c, setmetatable({},{__mode = 'k'}), setmetatable({},{__mode = 'k'}), setmetatable({},{__mode = 'k'})
	c.subclasses = function(self, filter, ...) assert_call_from_class(self, 'subclasses(class)'); filter = filter or default_filter; local subclasses = {}; for class in pairs(_classes) do if class ~= baseMt and class:subclassOf(self) and filter(class,...) then subclasses[#subclasses + 1] = class end end; return subclasses end
	c.instances = function(self, filter, ...) assert_call_from_class(self, 'instances(class)'); filter = filter or default_filter; local instances = {}; for instance in pairs(_instances) do if instance:instanceOf(self) and filter(instance, ...) then instances[#instances + 1] = instance end end; return instances end
	c.subclassOf = function(self, superclass) assert_call_from_class(self, 'subclassOf(superclass)'); assert(class.isClass(superclass), 'Wrong argument given to method "subclassOf()". Expected a class.'); local super = self.super; while super do if super == superclass then return true end; super = super.super end; return false end
	c.classOf = function(self, subclass) assert_call_from_class(self, 'classOf(subclass)'); assert(class.isClass(subclass), 'Wrong argument given to method "classOf()". Expected a class.'); return subclass:subclassOf(self) end
	c.instanceOf = function(self, fromclass) assert_call_from_instance(self, 'instanceOf(class)'); assert(class.isClass(fromclass), 'Wrong argument given to method "instanceOf()". Expected a class.'); return ((self.class == fromclass) or (self.class:subclassOf(fromclass))) end
	c.cast = function(self, toclass) assert_call_from_instance(self, 'instanceOf(class)'); assert(class.isClass(toclass), 'Wrong argument given to method "cast()". Expected a class.'); setmetatable(self, toclass); self.class = toclass; return self end
	c.with = function(self,...) assert_call_from_class(self, 'with(mixin)'); for _, mixin in ipairs({...}) do assert(self.mixins[mixin] ~= true, ('Attempted to include a mixin which was already included in %s'):format(tostring(self))); self.mixins[mixin] = true; deep_copy(mixin, self, 'function') end return self end
	c.includes = function(self, mixin) assert_call_from_class(self,'includes(mixin)'); return not not (self.mixins[mixin] or (self.super and self.super:includes(mixin))) end	
	c.without = function(self, ...) assert_call_from_class(self, 'without(mixin)'); for _, mixin in ipairs({...}) do
			assert(self.mixins[mixin] == true, ('Attempted to remove a mixin which is not included in %s'):format(tostring(self))); local classes = self:subclasses(); classes[#classes + 1] = self
			for _, class in ipairs(classes) do for method_name, method in pairs(mixin) do if type(method) == 'function' then class[method_name] = nil end end end; self.mixins[mixin] = nil end; return self end; return setmetatable(c, baseMt) end
class._DESCRIPTION = '30 lines library for object orientation in Lua'; class._VERSION = '30log v1.2.0'; class._URL = 'http://github.com/Yonaba/30log'; class._LICENSE = 'MIT LICENSE <http://www.opensource.org/licenses/mit-license.php>' setmetatable(class,{__call = function(_,...) return _class(...) end })
----

---- 'new' function, (its not really skidded i just made it a long time ago)
new = function(InstanceClass, InstanceParent, ...)
	-- Check if the arguments are correct
	local InstanceClassType = type(InstanceClass)
	local InstanceParentType = typeof(InstanceParent)
	assert(InstanceClassType == "nil" or InstanceClassType == "string", "Expected string at argument #1, got " .. InstanceClassType)
	assert(InstanceParentType == "nil" or InstanceParentType == "Instance", "Expected Instance at argument #2, got " .. InstanceParentType)

	-- Create instance
	local ReturnedInstance
	local SUCCESS, RETURN = pcall(function()
		ReturnedInstance = Instance.new(InstanceClass)
	end)
	if not SUCCESS then
		error(InstanceClass .. " is not a valid ClassName: " .. debug.traceback())
		return nil
	end
	ReturnedInstance.Parent = InstanceParent

	-- Change properties of the Instance
	local ArgumentProperties = {...}
	local SetProperties = {}

	for ArgumentIndex, Argument in ipairs(ArgumentProperties) do
		-- Check if 'Argument' is a table
		local ArgumentType = type(Argument)
		assert(ArgumentType == "table", "Expected table at argument #" .. tostring(ArgumentIndex + 2) .. ", got " .. ArgumentType)
		--
		for PropertyName, Property in pairs(Argument) do
			SetProperties[PropertyName] = Property
		end
	end

	for PropertyName, Property in pairs(SetProperties) do
		local SUCCESS, RETURN = pcall(function()
			ReturnedInstance[PropertyName] = Property
		end)

		if not SUCCESS then
			error("Error trying to set property '" .. PropertyName .. "' to Instance " .. InstanceClass .. " (Property type is " .. type(PropertyValue) .. ") ")
		end
	end

	return ReturnedInstance
end
----

-- Create Screengui
do
	local _LP = game:GetService("Players").LocalPlayer

	local SUCCESS, RETURN = pcall(function()
		Parent = game:GetService("CoreGui")
	end)

	if not SUCCESS then
		Parent = _LP:FindFirstChildOfClass("PlayerGui")
	end
end

GUI = Parent:FindFirstChild("_ORI_LIB_NOTIFS") or Instance.new("ScreenGui")
GUI.ResetOnSpawn = false
GUI.Name = "_ORI_LIB_NOTIFS"
GUI.Parent = Parent
----

---- Notifications system
NotificationHeight = 40

NotificationNormal = Color3.fromRGB(47, 47, 47)
NotificationError = Color3.fromRGB(200, 47, 47)
NotificationTitleHeight = 15
NotificationGreen = Color3.fromRGB(48, 220, 48)
NotificationRed = Color3.fromRGB(220, 48, 48)

Notification = class("Notification", {
	parent = nil, -- : UIInstance

	frame = nil,
	bg = nil,
	framecorner = nil,
	colorbar = nil,
	text = nil,
	duration = 0,

	fadeInTweens = {},
	fadeOutTweens = {},
	visible = false,
})

function Notification:createTweens()
	local ts = game:GetService("TweenService")

	local animInfo = TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.In)

	table.insert(self.fadeOutTweens, ts:Create(self.frame, animInfo, {BackgroundTransparency = 1, Position = UDim2.fromOffset(0, 20)}))
	table.insert(self.fadeOutTweens, ts:Create(self.text, animInfo, {TextTransparency = 1}))
	table.insert(self.fadeOutTweens, ts:Create(self.colorbar, animInfo, {BackgroundTransparency = 1}))
	
	table.insert(self.fadeInTweens, ts:Create(self.frame, animInfo, {BackgroundTransparency = 0, Position = UDim2.fromOffset(0, 0)}))
	table.insert(self.fadeInTweens, ts:Create(self.text, animInfo, {TextTransparency = 0}))
	table.insert(self.fadeInTweens, ts:Create(self.colorbar, animInfo, {BackgroundTransparency = 0}))
end

function Notification:reset()
	self.frame.BackgroundTransparency = 1
	self.frame.Position = UDim2.fromOffset(0, 20)
	
	self.text.TextTransparency = 1
	
	self.colorbar.BackgroundTransparency = 12
	
	self.visible = false
end

function Notification:fadeOut()
	self.visible = false
	for i, v in ipairs(self.fadeOutTweens) do
		v:Play()
	end
end

function Notification:fadeIn()
	self.visible = true
	for i, v in ipairs(self.fadeInTweens) do
		v:Play()
	end
end

function Notification:setRadius(num)
	self.framecorner.CornerRadius = UDim.new(0, num)
end

function Notification:setColor(color)
	self.colorbar.BackgroundColor3 = color
end

function Notification:setHeight(num)
	self.bg.Size = UDim2.new(1, 0, 0, num or NotificationHeight)
end

function Notification:init(parent, color, text, height)
	self.parent = parent

	-- Create bg
	self.bg = new("Frame", self.parent, {
		BackgroundTransparency = 1,
		ClipsDescendants = true
	})
	self:setHeight(height)

	-- Create frame
	self.frame = new("Frame", self.bg, {
		Size = UDim2.new(1, 0, 1, 0),
		BorderSizePixel = 0,
		BackgroundColor3 = Color3.fromRGB(47, 47, 47)
	})
	-- Add corner
	self.framecorner = new("UICorner", self.frame, {
		CornerRadius = UDim.new()
	})

	-- Create colorbar
	self.colorbar = new("Frame", self.frame, {
		Position = UDim2.fromScale(0, 1), AnchorPoint = Vector2.new(0, 1),
		Size = UDim2.new(1, 0, 0, 4),
		BorderSizePixel = 0,
	})
	self:setColor(color)

	-- Create text
	self.text = new("TextLabel", self.frame, {
		Size = UDim2.new(1, 0, 1, 0),
		BackgroundTransparency = 1,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		Text = text,
	})
	
	-- Create tweens
	self:reset()
	self:createTweens()
	self:fadeIn()
end
-- Notification Holder
NotificationHolder = class("NotificationHolder", {
	parent = nil,

	notifications = {},
	aliveNotifications = 0,

	frame = nil,
	framelayout = nil,
})

function NotificationHolder:init(parent)
	self.parent = parent

	-- Create frame
	self.frame = new("Frame", self.parent, {
		BackgroundTransparency = 1,
		Position = UDim2.new(0, 5, 1, -60),
		AnchorPoint = Vector2.new(0, 1),
		Size = UDim2.fromOffset(230, 300),
	})
	-- Add layout
	self.framelayout = new("UIListLayout", self.frame, {
		SortOrder = Enum.SortOrder.LayoutOrder,
		VerticalAlignment = Enum.VerticalAlignment.Bottom,
		Padding = UDim.new(0, 3)
	})
end

function NotificationHolder:notificate(data)
	local notifId = self.aliveNotifications + 1
	self.aliveNotifications = notifId
	
	local notif = Notification(self.frame, data.color, data.text, data.height)
	table.insert(self.notifications, notif)
	
	if notifId == 1 then
		notif:setRadius(4)
	end
	
	notif:fadeIn()
	
	coroutine.wrap(function(self, duration, notif, id)
		
		wait(duration)
		
		notif:fadeOut()
		self.aliveNotifications = self.aliveNotifications - 1
		
		local nextNotif = self.notifications[id + 1]
		
		wait(0.2)
		
		if nextNotif then
			nextNotif:setRadius(4)
		end
		
		if self.aliveNotifications == 0 then
			for i, v in ipairs(self.notifications) do
				v.bg:Destroy()
				self.notifications[i] = nil
			end
		end
		
	end)(self, data.duration, notif, notifId)
end

--[[
Sample - Without Notificate
local holder = NotificationHolder(GUI)
local notif1 = Notification(holder.frame, NotificationRed, "._.XD")
notif1:setRadius(4)

wait(1)
notif1:fadeOut()
]]

	-- Create the main NotificationHolder
MainNotificationHolder = NotificationHolder(GUI)

		-- Create the main notificate function
notificate = function(data)
	assert(type(data.text) == "string", ("('notificate') malformed text, string expected got %s"):format(type(data.text)))
	assert(typeof(data.color) == "Color3", ("('notificate') malformed color, Color3 expected got %s"):format(typeof(data.color)))
	assert(type(data.duration) == "number", ("('notificate') malformed duration, number expected got %s"):format(type(data.duration)))
	local heightType = type(data.height or NotificationHeight); assert(heightType == 'number', ("('notificate') malformed height, number expected got %s"):format(heightType))

	MainNotificationHolder:notificate(data)
end

--[[
Notificating Sample
notificate({
	["text"] = "Hello world!",
	["color"] = NotificationGreen,
	["duration"] = 11,
})

notificate({
	["text"] = "Error: These notifications are very hot",
	["color"] = NotificationError,
	["duration"] = 6,
	["height"] = 90,
})
]]